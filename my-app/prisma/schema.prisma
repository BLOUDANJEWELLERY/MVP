// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  role      String

  firstName String
  lastName  String?
  dob       DateTime?
  gender    String?

  address1   String?
  address2   String?
  state      String?
  country    String?
  postalCode String?

  products  Product[]
	userItems  UserItem[] @relation("UserToUserItem")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  images      String[]
  colors      String[]   @default([])
  sizes       String[]   @default([])
  condition   String     @default("")
  era         String     @default("")
  quantity    Int

  ownerId     String     @db.ObjectId
  owner       User       @relation(fields: [ownerId], references: [id])

  categories  ProductCategory[]  // explicit join relation
	userItems   UserItem[] @relation("ProductToUserItem")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  order     Int        @default(0)
  parentId  String?    @db.ObjectId
  parent    Category?  @relation("CategoryChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Category[] @relation("CategoryChildren")

  products  ProductCategory[] // explicit join relation

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Explicit join table for Product â†” Category many-to-many
model ProductCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId

  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
}

model UserItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserToUserItem")

  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], name: "ProductToUserItem")

  color     String?
  size      String?
  quantity  Int      @default(1)
  status    String   // "cart" or "wishlist"
  price     Float
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Order {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  status      OrderStatus  @default(PENDING)
  payment     PaymentType  @default(COD)
  total       Float
  address     String
  phone       String
  note        String? 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  seller    User     @relation(fields: [sellerId], references: [id])
  sellerId  String

  quantity  Int
  price     Float     // snapshot at purchase time
  color     String?
  size      String?
  status    ItemStatus @default(PENDING)
}

enum OrderStatus {
  PENDING     // placed but not confirmed
  CONFIRMED   // confirmed by seller/admin
  SHIPPED     // shipped out
  DELIVERED   // completed
  CANCELLED   // cancelled
}

enum ItemStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  COD   // cash on delivery
  CARD  // (future use)
}